package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/mvr-garcia/go-graphql/internal/domain"
	"github.com/mvr-garcia/go-graphql/internal/ui/graph/model"
)

// Courses is the resolver for the courses field.
func (r *categoryResolver) Courses(ctx context.Context, obj *model.Category) ([]*model.Course, error) {
	panic(fmt.Errorf("not implemented: Courses - courses"))
}

// Category is the resolver for the category field.
func (r *courseResolver) Category(ctx context.Context, obj *model.Course) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	// Map input to domain entity
	category := domain.Category{
		Name:        input.Name,
		Description: input.Description,
	}

	// Save category using repository
	savedCategory, err := r.CategoryRepo.Create(category)
	if err != nil {
		return nil, err
	}

	// Map domain entity to GraphQL model
	return &model.Category{
		ID:          savedCategory.ID,
		Name:        savedCategory.Name,
		Description: savedCategory.Description,
	}, nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	// Map input to domain entity
	course := domain.Course{
		Name:        input.Name,
		Description: input.Description,
		CategoryID:  input.CategoryID,
	}

	// Save course using repository
	savedCourse, err := r.CourseRepo.Create(course)
	if err != nil {
		return nil, err
	}

	// Map domain entity to GraphQL model
	return &model.Course{
		ID:          savedCourse.ID,
		Name:        savedCourse.Name,
		Description: savedCourse.Description,
	}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	panic(fmt.Errorf("not implemented: Courses - courses"))
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
